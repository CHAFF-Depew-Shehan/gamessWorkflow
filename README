This is the documentation for the following codes: runGAMESS_workflow.slurm, setupTSinputs.py


SETUP:

The setup is crucial for the success of this shell script. The general "workflow" to obtain a sufficient tranistion state involves the following general process:

1. Calculation of an Initial Hessian 
2. Calculation of a subsequent Saddle Point
3. Calculation of a Final Hessian 
4. Calculation of Intrinsic Reaction Coordinate 
5. Calculation of reactant and product geometry optimations 
6. Calculation of a final reactant and product Hessian 

These 6 steps involve sub-steps, depending on the results. This will be discussed later. In each reaction directory, only the following directories and subdirectories may exist:


1. HESS
	1a. Hess_init 
		(i) timeout_N (where N is the number of folders)
	1b. Hess_final
		(i) highOpttol_N
			-> timeout_N
	1c. Hess_LHS
		(i) rerun_N
			-> timeout_N
	1d. Hess_RHS
		(i) rerun_N
			-> timeout_N
2. SadPoint
	2a. highOpttol_N
3. IRC
	3a. IRC_backward
		(i) timeout 
	3b. IRC_forward
		(i) timeout 
4. OPT
	4a. Opt_LHS
		(i) timeout_N
	4b. Opt_RHS
		(i) timeout_N
5. misc
	-> any folders form previous runs that need to be archived 

*timeout folders are created whenever restart is required for the parent folder's run
**each outer-most subfolder in the above tree may include: .inp, .log, .dat, .rst, .out


PSEUDOCODE:

Step 1) Check for a converged SadPoint
	1a) No converged SadPoint in reaction directory
		-> code ends and raises error 
	1b) SadPoint .dat reads converged 
		(i) .dat is first of SadPoint results
			-> create Hess_final using TS_SadPoint.inp HEADER and TS_SadPoint.dat GEOMETRY & VEC sections
	       (ii) <highOpttol_N> folder exists
			-> create subsequent <highOpttol_N> folder using <highOpttol_(N-1)> TS_SadPoint.inp file and changing the OPTTOL, NSTEP, and any other user specified parameters
Step 2) Check for a completed Hess_final 
	2a) Hessian did not complete properly
		(i) Hessian ran 'ABNORMALLY'
			-> create ./timeout directory and run restart
	       (ii) Hessian has 2+ imaginary frequencies
			-> create ./SadPoint/highOpttol_(N+1) and move any existing files to ./SadPoint/highOpttol_N and run at new parameters
	2b) Hessian has ONE imaginary frequency
		-> create IRC_backward and IRC_forward folders by rerunning slurm script up until this point
Step 3) Check for complete IRC
	3a) IRC did not complete properly 
		(i) IRC_backward ran 'ABNORMALLY'
			-> create ./timeout folder and begin restart process
	       (ii) IRC_forward ran 'ABNORMALLY'
			-> create ./timeout folder and begin restart process
	3b) IRC complete ' NORMALLY'
		(i) Create Opt_LHS
	       (ii) Create Opt_RHS
Step 4) Check for complete OPT
	4a) OPT did not complete properly 
		(i) Opt_LHS ran 'ABNORMALLY'
			-> create ./timeout folder and begin restart process
	       (ii) Opt_RHS ran 'ABNORMALLY'
			-> create ./timeout folder and begin restart process
	4b) OPT completed ' SUCCESSFULLY'
		(i) Create Hess_LHS
	       (ii) Create Hess_RHS
Step 5) Check for complete reactants and products Hessian 
	5a) Hess did not complete properly 
		(i) Hessian ran 'ABNORMALLY'
			-> create ./timeout directory and run restart
               (ii) Hessian has 1+ imaginary frequencies
			-> create ./rerun directory and update TS_Hess.inp with refined parameters
	5b) Hessian is POSITIVE DEFINITE
		-> create summary.txt file via python 
		-> report Hess_LHS, Hess_final, and Hess_RHS energy sections (both gibbs free energy and electronic energy)


DECISION TREE:



					SadPoint Exists 
--------------------------------------------------0------------------------------------
                                                  |                        |  
                                                  |                        |
                                                  |                        |
                                                  | 		           |
---------------------------------------------------------------------------------------
                                                  |		           |
                                                  V		           V
                                          Converged in main           Not Converged		
                                             directory               (EXIT CODE!)  
                                           (no subfolders)
                                    
----------------------------------------------------1------------------------2---------
                  __________________________________||_______________________
                 V                             V		            V	
            Hess_final/TS_Hess.inp           Hess_final       Hess_final DNE                    
             DNE (CREATE INP)                Exists in         (CREATE HF!) 			
                                               top level 					
---------------------3----------------------------4------------------5----------------		
                        	    |			   |        		
                          	    ------------------------	 
                        	     _______|     |  	   |______
                        	     V	          V	          V
				   One 	         2+ Im.     	Run went 
				Imaginary	 Freq	    	'ABNORMALLY'			
				   Freq		(SUBMIT         (SUBMIT RESTART!)
					     NEW highOpttol!)
------------------------------------6--------------7-----------------8----------------- 
		   _________________|______________________________
	__________||___________				__________||___________ 	
        V		       V	       		V		       V	
     IRC_b DNE      	   IRC_b exists	 	  IRC_f exists		   IRC_f DNE
    (CREATE IRC_b!)    							(CREAT IRC_f!)
--------9---------------------10----------------------11-----------------------12------
                               |_______________________|  
				________||________________________________
			       |		  |                      |
			       V	          V                      V
			 IRC b/f ran 	      IRC b/f ran            IRC b/f satisfied
			 ' NORMALLY'          'ABNORMALLY               Opttol
					     (SUBMIT RESTART!)      (RUN Hess L/R)	
------------------------------13/14--------------------15/16----------------------17/18-
		______________||_____________________________                        
     __________||______________		           _________||___________ 	     
    V	        	       V	       	  V		         V	     
   OPT_R DNE      	   OPT_R exists	     OPT_L exists	     OPT_L DNE       
  (CREATE OPT_R!)    						   (CREAT OPT_L!)    
-------19---------------------20--------------------21------------------22-------------
                               |_______________________|                             
				________||________                                   
			       |		  |                                  
			       V	          V                                  
			 OPT L/R ran 	      OPT L/R did NOT run                    
		       'SUCCESSFULLY'          'SUCCESSFULLY'                        
					       (SUBMIT RESTART!)	             
------------------------------23/24-------------------25/26----------------------------
		______________||_____________________________                      
     __________||______________		           _________||____________         
     V                        V                    V                      V        
   HESS_R DNE      	  HESS_R exists	    HESS_L exists	    HESS_L DNE     
  (CREATE HESS_R!)    						  (CREAT HESS_L!)
---------27-------------------28--------------------29------------------30-------------
                               |_______________________| 
			________||__________________________________________
		       |		            |			    |	
		       V	                    V                       V
		HESS L/R ran     		HESS L/R ran 	     	Hess L/R has
		' ABNORMALLY'    	       ' NORMALLY'             	1+ I Freq
		(SUBMIT RESTART!)	    (CREATE SUMMARY.TXT!)  (RERUN w/ lower CONV)
----------------------31/32-----------------------33/34-------------------35/36--------











* nodes 1 and 3 (and all subsequent nodes) merge into nodes 4 and 5
                                                                               
                                                                               
                                                                               
                                                                               
                                                                               
                                                                               
 *** We are changing conditions for 6 (check if top level has inp file or   
	not) and 11 (2 + imaginary freq in top level Hess final )
	*** node 8, hess final AND input file in folder must exists 
*** create a node 9 and 9.5, one for if Hess final folder needs to be created 
and one for if Hess_final/TS_Hess.inp needs to be created                     
*** at node 11, save number of highOpttol (no need for global variable)

INPUT FILE NAMING CONVENTION:
1. TS_Hess.inp
2. TS_SadPoint.inp
3. TS_IRCb.inp
4. TS_IRCf.inp
5. TS_OptLHS.inp
6. TS_OptRHS.inp 

CODE ARCHITECTURE:

The main program is ran through the shell executable 'runGAMESS_workflow.slurm' in the command line: ./runGAMESS_workflow.slurm This slurm script runs a 'runGAMESS_workflow.py' python script that serves as the main script to receive any inputs from the slurm script necessary to utilize the python functions. 

-> runGAMESS_workflow.slurm: "./runGAMESS_workflow.slurm" in command line
	-> runGAMESS_workflow.py: "python3 runGAMESS_workflow.py -Input1 -Input2"
		-> createInputFile.py: "import createInputFile"
			-> createInpFileFunc.py: "import createInpFileFunc as create"
		-> statusUpdateFunc.py: "import statusUpdateFunc.py"
			-> variables.py: "import variables as vars"	
Python Package 
	(1) RUN_GAMESS_WORKFLOW.PY: Takes functions below and within one script, receives the reaction of interest and its path to determine its status and write the new input file so that the main slurm file is ready to submit the subsequent job
	
	INPUTS: R##, -forwardRxn, -backwardRxn
	OUTPUTS: Update of workflow status and Next necessary input file 
	
	(2) CREATE_INPUT_FILE.PY: Imports any functions made to create input file components and opens a new input file, writes relevant information to it, and closes the file. 
	
	INPUTS: input file components, input file name, input file destination path
	OUTPUT: written input file in desired path

	(3) CREATE_INP_FILE_FUNC.PY: Includes all functions used to write certain groups of the input file 
	
	FUNCTIONS: 
		header(prevInpFile, newInputFile, runtyp, *parameters, opttol="0.0001", nstep="20", npoint="15"):
		geom(prevGeomDatFile, newInputFile, runType, restart):
		vec(prevVecDatFile, newInputFile, runType, restart):
		hess(prevHessDatFile, newInputFile):
		IRC(prevIRCDatFile, newInputFile):
		***vib()
		***grad()
	
	(4) STATUS_UPDATE_FUNC.PY: 

	FUNCTIONS:
		***findStatus(rxn):

	(5) VARIABLES.PY: Contains any hard coded variables associated with determining the jobs' status

	VARIABLES:
		al_init (initial graph up to final hess completion)
		al_rhs (graph with only rhs and forward nodes)
		al_lhs (graph with only lhs and backward nodes)
		search (dictionary of status search conditions)
		actions (dictionary of actions after discovering status)

	(6) TOOLBOX.PY:
		grep(pattern, file_path):
		***DFS(graph, startingNode)
		readToString(fileObject, targetString):




